{"ast":null,"code":"import _objectSpread from \"C:/Coding/Meta_Advanced_Basics/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport sync, { cancelSync, flushSync } from 'framesync';\nimport { mix } from 'popmotion';\nimport { animate } from '../../animation/animate.mjs';\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEquals, isDeltaZero, isCloseTo, aspectRatio } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nimport { delay } from '../../utils/delay.mjs';\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nfunction createProjectionNode(_ref) {\n  let {\n    attachResizeListener,\n    defaultParent,\n    measureScroll,\n    checkIsScrollRoot,\n    resetTransform\n  } = _ref;\n  return class ProjectionNode {\n    constructor(elementId) {\n      let latestValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      let parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent();\n      /**\n       * A Set containing all this component's children. This is used to iterate\n       * through the children.\n       *\n       * TODO: This could be faster to iterate as a flat array stored on the root node.\n       */\n      this.children = new Set();\n      /**\n       * Options for the node. We use this to configure what kind of layout animations\n       * we should perform (if any).\n       */\n      this.options = {};\n      /**\n       * We use this to detect when its safe to shut down part of a projection tree.\n       * We have to keep projecting children for scale correction and relative projection\n       * until all their parents stop performing layout animations.\n       */\n      this.isTreeAnimating = false;\n      this.isAnimationBlocked = false;\n      /**\n       * Flag to true if we think this layout has been changed. We can't always know this,\n       * currently we set it to true every time a component renders, or if it has a layoutDependency\n       * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n       * and if one node is dirtied, they all are.\n       */\n      this.isLayoutDirty = false;\n      /**\n       * Block layout updates for instant layout transitions throughout the tree.\n       */\n      this.updateManuallyBlocked = false;\n      this.updateBlockedByResize = false;\n      /**\n       * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n       * call.\n       */\n      this.isUpdating = false;\n      /**\n       * If this is an SVG element we currently disable projection transforms\n       */\n      this.isSVG = false;\n      /**\n       * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n       * its projection styles.\n       */\n      this.needsReset = false;\n      /**\n       * Flags whether this node should have its transform reset prior to measuring.\n       */\n      this.shouldResetTransform = false;\n      /**\n       * An object representing the calculated contextual/accumulated/tree scale.\n       * This will be used to scale calculcated projection transforms, as these are\n       * calculated in screen-space but need to be scaled for elements to layoutly\n       * make it to their calculated destinations.\n       *\n       * TODO: Lazy-init\n       */\n      this.treeScale = {\n        x: 1,\n        y: 1\n      };\n      /**\n       *\n       */\n      this.eventHandlers = new Map();\n      // Note: Currently only running on root node\n      this.potentialNodes = new Map();\n      this.checkUpdateFailed = () => {\n        if (this.isUpdating) {\n          this.isUpdating = false;\n          this.clearAllSnapshots();\n        }\n      };\n      this.updateProjection = () => {\n        this.nodes.forEach(resolveTargetDelta);\n        this.nodes.forEach(calcProjection);\n      };\n      this.hasProjected = false;\n      this.isVisible = true;\n      this.animationProgress = 0;\n      /**\n       * Shared layout\n       */\n      // TODO Only running on root node\n      this.sharedNodes = new Map();\n      this.elementId = elementId;\n      this.latestValues = latestValues;\n      this.root = parent ? parent.root || parent : this;\n      this.path = parent ? [...parent.path, parent] : [];\n      this.parent = parent;\n      this.depth = parent ? parent.depth + 1 : 0;\n      elementId && this.root.registerPotentialNode(elementId, this);\n      for (let i = 0; i < this.path.length; i++) {\n        this.path[i].shouldResetTransform = true;\n      }\n      if (this.root === this) this.nodes = new FlatTree();\n    }\n    addEventListener(name, handler) {\n      if (!this.eventHandlers.has(name)) {\n        this.eventHandlers.set(name, new SubscriptionManager());\n      }\n      return this.eventHandlers.get(name).add(handler);\n    }\n    notifyListeners(name) {\n      const subscriptionManager = this.eventHandlers.get(name);\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      subscriptionManager === null || subscriptionManager === void 0 ? void 0 : subscriptionManager.notify(...args);\n    }\n    hasListeners(name) {\n      return this.eventHandlers.has(name);\n    }\n    registerPotentialNode(id, node) {\n      this.potentialNodes.set(id, node);\n    }\n    /**\n     * Lifecycles\n     */\n    mount(instance) {\n      let isLayoutDirty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var _a;\n      if (this.instance) return;\n      this.isSVG = instance instanceof SVGElement && instance.tagName !== \"svg\";\n      this.instance = instance;\n      const {\n        layoutId,\n        layout,\n        visualElement\n      } = this.options;\n      if (visualElement && !visualElement.current) {\n        visualElement.mount(instance);\n      }\n      this.root.nodes.add(this);\n      (_a = this.parent) === null || _a === void 0 ? void 0 : _a.children.add(this);\n      this.elementId && this.root.potentialNodes.delete(this.elementId);\n      if (isLayoutDirty && (layout || layoutId)) {\n        this.isLayoutDirty = true;\n      }\n      if (attachResizeListener) {\n        let cancelDelay;\n        const resizeUnblockUpdate = () => this.root.updateBlockedByResize = false;\n        attachResizeListener(instance, () => {\n          this.root.updateBlockedByResize = true;\n          cancelDelay && cancelDelay();\n          cancelDelay = delay(resizeUnblockUpdate, 250);\n          if (globalProjectionState.hasAnimatedSinceResize) {\n            globalProjectionState.hasAnimatedSinceResize = false;\n            this.nodes.forEach(finishAnimation);\n          }\n        });\n      }\n      if (layoutId) {\n        this.root.registerSharedNode(layoutId, this);\n      }\n      // Only register the handler if it requires layout animation\n      if (this.options.animate !== false && visualElement && (layoutId || layout)) {\n        this.addEventListener(\"didUpdate\", _ref2 => {\n          let {\n            delta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n            layout: newLayout\n          } = _ref2;\n          var _a, _b, _c, _d, _e;\n          if (this.isTreeAnimationBlocked()) {\n            this.target = undefined;\n            this.relativeTarget = undefined;\n            return;\n          }\n          // TODO: Check here if an animation exists\n          const layoutTransition = (_b = (_a = this.options.transition) !== null && _a !== void 0 ? _a : visualElement.getDefaultTransition()) !== null && _b !== void 0 ? _b : defaultLayoutTransition;\n          const {\n            onLayoutAnimationStart,\n            onLayoutAnimationComplete\n          } = visualElement.getProps();\n          /**\n           * The target layout of the element might stay the same,\n           * but its position relative to its parent has changed.\n           */\n          const targetChanged = !this.targetLayout || !boxEquals(this.targetLayout, newLayout) || hasRelativeTargetChanged;\n          /**\n           * If the layout hasn't seemed to have changed, it might be that the\n           * element is visually in the same place in the document but its position\n           * relative to its parent has indeed changed. So here we check for that.\n           */\n          const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n          if (((_c = this.resumeFrom) === null || _c === void 0 ? void 0 : _c.instance) || hasOnlyRelativeTargetChanged || hasLayoutChanged && (targetChanged || !this.currentAnimation)) {\n            if (this.resumeFrom) {\n              this.resumingFrom = this.resumeFrom;\n              this.resumingFrom.resumingFrom = undefined;\n            }\n            this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n            const animationOptions = _objectSpread(_objectSpread({}, getValueTransition(layoutTransition, \"layout\")), {}, {\n              onPlay: onLayoutAnimationStart,\n              onComplete: onLayoutAnimationComplete\n            });\n            if (visualElement.shouldReduceMotion) {\n              animationOptions.delay = 0;\n              animationOptions.type = false;\n            }\n            this.startAnimation(animationOptions);\n          } else {\n            /**\n             * If the layout hasn't changed and we have an animation that hasn't started yet,\n             * finish it immediately. Otherwise it will be animating from a location\n             * that was probably never commited to screen and look like a jumpy box.\n             */\n            if (!hasLayoutChanged && this.animationProgress === 0) {\n              finishAnimation(this);\n            }\n            this.isLead() && ((_e = (_d = this.options).onExitComplete) === null || _e === void 0 ? void 0 : _e.call(_d));\n          }\n          this.targetLayout = newLayout;\n        });\n      }\n    }\n    unmount() {\n      var _a, _b;\n      this.options.layoutId && this.willUpdate();\n      this.root.nodes.remove(this);\n      (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.remove(this);\n      (_b = this.parent) === null || _b === void 0 ? void 0 : _b.children.delete(this);\n      this.instance = undefined;\n      cancelSync.preRender(this.updateProjection);\n    }\n    // only on the root\n    blockUpdate() {\n      this.updateManuallyBlocked = true;\n    }\n    unblockUpdate() {\n      this.updateManuallyBlocked = false;\n    }\n    isUpdateBlocked() {\n      return this.updateManuallyBlocked || this.updateBlockedByResize;\n    }\n    isTreeAnimationBlocked() {\n      var _a;\n      return this.isAnimationBlocked || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimationBlocked()) || false;\n    }\n    // Note: currently only running on root node\n    startUpdate() {\n      var _a;\n      if (this.isUpdateBlocked()) return;\n      this.isUpdating = true;\n      (_a = this.nodes) === null || _a === void 0 ? void 0 : _a.forEach(resetRotation);\n    }\n    willUpdate() {\n      let shouldNotifyListeners = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var _a, _b, _c;\n      if (this.root.isUpdateBlocked()) {\n        (_b = (_a = this.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);\n        return;\n      }\n      !this.root.isUpdating && this.root.startUpdate();\n      if (this.isLayoutDirty) return;\n      this.isLayoutDirty = true;\n      for (let i = 0; i < this.path.length; i++) {\n        const node = this.path[i];\n        node.shouldResetTransform = true;\n        /**\n         * TODO: Check we haven't updated the scroll\n         * since the last didUpdate\n         */\n        node.updateScroll();\n      }\n      const {\n        layoutId,\n        layout\n      } = this.options;\n      if (layoutId === undefined && !layout) return;\n      const transformTemplate = (_c = this.options.visualElement) === null || _c === void 0 ? void 0 : _c.getProps().transformTemplate;\n      this.prevTransformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n      this.updateSnapshot();\n      shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n    }\n    // Note: Currently only running on root node\n    didUpdate() {\n      const updateWasBlocked = this.isUpdateBlocked();\n      // When doing an instant transition, we skip the layout update,\n      // but should still clean up the measurements so that the next\n      // snapshot could be taken correctly.\n      if (updateWasBlocked) {\n        this.unblockUpdate();\n        this.clearAllSnapshots();\n        this.nodes.forEach(clearMeasurements);\n        return;\n      }\n      if (!this.isUpdating) return;\n      this.isUpdating = false;\n      /**\n       * Search for and mount newly-added projection elements.\n       *\n       * TODO: Every time a new component is rendered we could search up the tree for\n       * the closest mounted node and query from there rather than document.\n       */\n      if (this.potentialNodes.size) {\n        this.potentialNodes.forEach(mountNodeEarly);\n        this.potentialNodes.clear();\n      }\n      /**\n       * Write\n       */\n      this.nodes.forEach(resetTransformStyle);\n      /**\n       * Read ==================\n       */\n      // Update layout measurements of updated children\n      this.nodes.forEach(updateLayout);\n      /**\n       * Write\n       */\n      // Notify listeners that the layout is updated\n      this.nodes.forEach(notifyLayoutUpdate);\n      this.clearAllSnapshots();\n      // Flush any scheduled updates\n      flushSync.update();\n      flushSync.preRender();\n      flushSync.render();\n    }\n    clearAllSnapshots() {\n      this.nodes.forEach(clearSnapshot);\n      this.sharedNodes.forEach(removeLeadSnapshots);\n    }\n    scheduleUpdateProjection() {\n      sync.preRender(this.updateProjection, false, true);\n    }\n    scheduleCheckAfterUnmount() {\n      /**\n       * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n       * we manually call didUpdate to give a chance to the siblings to animate.\n       * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n       */\n      sync.postRender(() => {\n        if (this.isLayoutDirty) {\n          this.root.didUpdate();\n        } else {\n          this.root.checkUpdateFailed();\n        }\n      });\n    }\n    /**\n     * Update measurements\n     */\n    updateSnapshot() {\n      if (this.snapshot || !this.instance) return;\n      this.snapshot = this.measure();\n    }\n    updateLayout() {\n      var _a;\n      if (!this.instance) return;\n      // TODO: Incorporate into a forwarded scroll offset\n      this.updateScroll();\n      if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {\n        return;\n      }\n      /**\n       * When a node is mounted, it simply resumes from the prevLead's\n       * snapshot instead of taking a new one, but the ancestors scroll\n       * might have updated while the prevLead is unmounted. We need to\n       * update the scroll again to make sure the layout we measure is\n       * up to date.\n       */\n      if (this.resumeFrom && !this.resumeFrom.instance) {\n        for (let i = 0; i < this.path.length; i++) {\n          const node = this.path[i];\n          node.updateScroll();\n        }\n      }\n      const prevLayout = this.layout;\n      this.layout = this.measure(false);\n      this.layoutCorrected = createBox();\n      this.isLayoutDirty = false;\n      this.projectionDelta = undefined;\n      this.notifyListeners(\"measure\", this.layout.layoutBox);\n      (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout === null || prevLayout === void 0 ? void 0 : prevLayout.layoutBox);\n    }\n    updateScroll() {\n      if (this.options.layoutScroll && this.instance) {\n        this.isScrollRoot = checkIsScrollRoot(this.instance);\n        this.scroll = measureScroll(this.instance);\n      }\n    }\n    resetTransform() {\n      var _a;\n      if (!resetTransform) return;\n      const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n      const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n      const transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n      const transformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n      const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n      if (isResetRequested && (hasProjection || hasTransform(this.latestValues) || transformTemplateHasChanged)) {\n        resetTransform(this.instance, transformTemplateValue);\n        this.shouldResetTransform = false;\n        this.scheduleRender();\n      }\n    }\n    measure() {\n      let removeTransform = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      const pageBox = this.measurePageBox();\n      let layoutBox = this.removeElementScroll(pageBox);\n      /**\n       * Measurements taken during the pre-render stage\n       * still have transforms applied so we remove them\n       * via calculation.\n       */\n      if (removeTransform) {\n        layoutBox = this.removeTransform(layoutBox);\n      }\n      roundBox(layoutBox);\n      return {\n        measuredBox: pageBox,\n        layoutBox,\n        latestValues: {}\n      };\n    }\n    measurePageBox() {\n      const {\n        visualElement\n      } = this.options;\n      if (!visualElement) return createBox();\n      const box = visualElement.measureViewportBox();\n      // Remove viewport scroll to give page-relative coordinates\n      const {\n        scroll\n      } = this.root;\n      if (scroll) {\n        translateAxis(box.x, scroll.x);\n        translateAxis(box.y, scroll.y);\n      }\n      return box;\n    }\n    removeElementScroll(box) {\n      const boxWithoutScroll = createBox();\n      copyBoxInto(boxWithoutScroll, box);\n      /**\n       * Performance TODO: Keep a cumulative scroll offset down the tree\n       * rather than loop back up the path.\n       */\n      for (let i = 0; i < this.path.length; i++) {\n        const node = this.path[i];\n        const {\n          scroll,\n          options,\n          isScrollRoot\n        } = node;\n        if (node !== this.root && scroll && options.layoutScroll) {\n          /**\n           * If this is a new scroll root, we want to remove all previous scrolls\n           * from the viewport box.\n           */\n          if (isScrollRoot) {\n            copyBoxInto(boxWithoutScroll, box);\n            const {\n              scroll: rootScroll\n            } = this.root;\n            /**\n             * Undo the application of page scroll that was originally added\n             * to the measured bounding box.\n             */\n            if (rootScroll) {\n              translateAxis(boxWithoutScroll.x, -rootScroll.x);\n              translateAxis(boxWithoutScroll.y, -rootScroll.y);\n            }\n          }\n          translateAxis(boxWithoutScroll.x, scroll.x);\n          translateAxis(boxWithoutScroll.y, scroll.y);\n        }\n      }\n      return boxWithoutScroll;\n    }\n    applyTransform(box) {\n      let transformOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      const withTransforms = createBox();\n      copyBoxInto(withTransforms, box);\n      for (let i = 0; i < this.path.length; i++) {\n        const node = this.path[i];\n        if (!transformOnly && node.options.layoutScroll && node.scroll && node !== node.root) {\n          transformBox(withTransforms, {\n            x: -node.scroll.x,\n            y: -node.scroll.y\n          });\n        }\n        if (!hasTransform(node.latestValues)) continue;\n        transformBox(withTransforms, node.latestValues);\n      }\n      if (hasTransform(this.latestValues)) {\n        transformBox(withTransforms, this.latestValues);\n      }\n      return withTransforms;\n    }\n    removeTransform(box) {\n      var _a;\n      const boxWithoutTransform = createBox();\n      copyBoxInto(boxWithoutTransform, box);\n      for (let i = 0; i < this.path.length; i++) {\n        const node = this.path[i];\n        if (!node.instance) continue;\n        if (!hasTransform(node.latestValues)) continue;\n        hasScale(node.latestValues) && node.updateSnapshot();\n        const sourceBox = createBox();\n        const nodeBox = node.measurePageBox();\n        copyBoxInto(sourceBox, nodeBox);\n        removeBoxTransforms(boxWithoutTransform, node.latestValues, (_a = node.snapshot) === null || _a === void 0 ? void 0 : _a.layoutBox, sourceBox);\n      }\n      if (hasTransform(this.latestValues)) {\n        removeBoxTransforms(boxWithoutTransform, this.latestValues);\n      }\n      return boxWithoutTransform;\n    }\n    /**\n     *\n     */\n    setTargetDelta(delta) {\n      this.targetDelta = delta;\n      this.root.scheduleUpdateProjection();\n    }\n    setOptions(options) {\n      this.options = _objectSpread(_objectSpread(_objectSpread({}, this.options), options), {}, {\n        crossfade: options.crossfade !== undefined ? options.crossfade : true\n      });\n    }\n    clearMeasurements() {\n      this.scroll = undefined;\n      this.layout = undefined;\n      this.snapshot = undefined;\n      this.prevTransformTemplateValue = undefined;\n      this.targetDelta = undefined;\n      this.target = undefined;\n      this.isLayoutDirty = false;\n    }\n    /**\n     * Frame calculations\n     */\n    resolveTargetDelta() {\n      var _a;\n      const {\n        layout,\n        layoutId\n      } = this.options;\n      /**\n       * If we have no layout, we can't perform projection, so early return\n       */\n      if (!this.layout || !(layout || layoutId)) return;\n      /**\n       * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n       * a relativeParent. This will allow a component to perform scale correction\n       * even if no animation has started.\n       */\n      // TODO If this is unsuccessful this currently happens every frame\n      if (!this.targetDelta && !this.relativeTarget) {\n        // TODO: This is a semi-repetition of further down this function, make DRY\n        const relativeParent = this.getClosestProjectingParent();\n        if (relativeParent && relativeParent.layout) {\n          this.relativeParent = relativeParent;\n          this.relativeTarget = createBox();\n          this.relativeTargetOrigin = createBox();\n          calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n          copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n        } else {\n          this.relativeParent = this.relativeTarget = undefined;\n        }\n      }\n      /**\n       * If we have no relative target or no target delta our target isn't valid\n       * for this frame.\n       */\n      if (!this.relativeTarget && !this.targetDelta) return;\n      /**\n       * Lazy-init target data structure\n       */\n      if (!this.target) {\n        this.target = createBox();\n        this.targetWithTransforms = createBox();\n      }\n      /**\n       * If we've got a relative box for this component, resolve it into a target relative to the parent.\n       */\n      if (this.relativeTarget && this.relativeTargetOrigin && ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.target)) {\n        calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n        /**\n         * If we've only got a targetDelta, resolve it into a target\n         */\n      } else if (this.targetDelta) {\n        if (Boolean(this.resumingFrom)) {\n          // TODO: This is creating a new object every frame\n          this.target = this.applyTransform(this.layout.layoutBox);\n        } else {\n          copyBoxInto(this.target, this.layout.layoutBox);\n        }\n        applyBoxDelta(this.target, this.targetDelta);\n      } else {\n        /**\n         * If no target, use own layout as target\n         */\n        copyBoxInto(this.target, this.layout.layoutBox);\n      }\n      /**\n       * If we've been told to attempt to resolve a relative target, do so.\n       */\n      if (this.attemptToResolveRelativeTarget) {\n        this.attemptToResolveRelativeTarget = false;\n        const relativeParent = this.getClosestProjectingParent();\n        if (relativeParent && Boolean(relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !relativeParent.options.layoutScroll && relativeParent.target) {\n          this.relativeParent = relativeParent;\n          this.relativeTarget = createBox();\n          this.relativeTargetOrigin = createBox();\n          calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n          copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n        } else {\n          this.relativeParent = this.relativeTarget = undefined;\n        }\n      }\n    }\n    getClosestProjectingParent() {\n      if (!this.parent || hasScale(this.parent.latestValues) || has2DTranslate(this.parent.latestValues)) return undefined;\n      if ((this.parent.relativeTarget || this.parent.targetDelta) && this.parent.layout) {\n        return this.parent;\n      } else {\n        return this.parent.getClosestProjectingParent();\n      }\n    }\n    calcProjection() {\n      var _a;\n      const {\n        layout,\n        layoutId\n      } = this.options;\n      /**\n       * If this section of the tree isn't animating we can\n       * delete our target sources for the following frame.\n       */\n      this.isTreeAnimating = Boolean(((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimating) || this.currentAnimation || this.pendingAnimation);\n      if (!this.isTreeAnimating) {\n        this.targetDelta = this.relativeTarget = undefined;\n      }\n      if (!this.layout || !(layout || layoutId)) return;\n      const lead = this.getLead();\n      /**\n       * Reset the corrected box with the latest values from box, as we're then going\n       * to perform mutative operations on it.\n       */\n      copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n      /**\n       * Apply all the parent deltas to this box to produce the corrected box. This\n       * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n       */\n      applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, Boolean(this.resumingFrom) || this !== lead);\n      const {\n        target\n      } = lead;\n      if (!target) return;\n      if (!this.projectionDelta) {\n        this.projectionDelta = createDelta();\n        this.projectionDeltaWithTransform = createDelta();\n      }\n      const prevTreeScaleX = this.treeScale.x;\n      const prevTreeScaleY = this.treeScale.y;\n      const prevProjectionTransform = this.projectionTransform;\n      /**\n       * Update the delta between the corrected box and the target box before user-set transforms were applied.\n       * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n       * for our layout reprojection, but still allow them to be scaled correctly by the user.\n       * It might be that to simplify this we may want to accept that user-set scale is also corrected\n       * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n       * to allow people to choose whether these styles are corrected based on just the\n       * layout reprojection or the final bounding box.\n       */\n      calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n      this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n      if (this.projectionTransform !== prevProjectionTransform || this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY) {\n        this.hasProjected = true;\n        this.scheduleRender();\n        this.notifyListeners(\"projectionUpdate\", target);\n      }\n    }\n    hide() {\n      this.isVisible = false;\n      // TODO: Schedule render\n    }\n    show() {\n      this.isVisible = true;\n      // TODO: Schedule render\n    }\n    scheduleRender() {\n      let notifyAll = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var _a, _b, _c;\n      (_b = (_a = this.options).scheduleRender) === null || _b === void 0 ? void 0 : _b.call(_a);\n      notifyAll && ((_c = this.getStack()) === null || _c === void 0 ? void 0 : _c.scheduleRender());\n      if (this.resumingFrom && !this.resumingFrom.instance) {\n        this.resumingFrom = undefined;\n      }\n    }\n    setAnimationOrigin(delta) {\n      let hasOnlyRelativeTargetChanged = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var _a;\n      const snapshot = this.snapshot;\n      const snapshotLatestValues = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.latestValues) || {};\n      const mixedValues = _objectSpread({}, this.latestValues);\n      const targetDelta = createDelta();\n      this.relativeTarget = this.relativeTargetOrigin = undefined;\n      this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n      const relativeLayout = createBox();\n      const isSharedLayoutAnimation = snapshot === null || snapshot === void 0 ? void 0 : snapshot.isShared;\n      const isOnlyMember = (((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.members.length) || 0) <= 1;\n      const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));\n      this.animationProgress = 0;\n      this.mixTargetDelta = latest => {\n        var _a;\n        const progress = latest / 1000;\n        mixAxisDelta(targetDelta.x, delta.x, progress);\n        mixAxisDelta(targetDelta.y, delta.y, progress);\n        this.setTargetDelta(targetDelta);\n        if (this.relativeTarget && this.relativeTargetOrigin && this.layout && ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.layout)) {\n          calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n          mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n        }\n        if (isSharedLayoutAnimation) {\n          this.animationValues = mixedValues;\n          mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n        }\n        this.root.scheduleUpdateProjection();\n        this.scheduleRender();\n        this.animationProgress = progress;\n      };\n      this.mixTargetDelta(0);\n    }\n    startAnimation(options) {\n      var _a, _b;\n      this.notifyListeners(\"animationStart\");\n      (_a = this.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n      if (this.resumingFrom) {\n        (_b = this.resumingFrom.currentAnimation) === null || _b === void 0 ? void 0 : _b.stop();\n      }\n      if (this.pendingAnimation) {\n        cancelSync.update(this.pendingAnimation);\n        this.pendingAnimation = undefined;\n      }\n      /**\n       * Start the animation in the next frame to have a frame with progress 0,\n       * where the target is the same as when the animation started, so we can\n       * calculate the relative positions correctly for instant transitions.\n       */\n      this.pendingAnimation = sync.update(() => {\n        globalProjectionState.hasAnimatedSinceResize = true;\n        this.currentAnimation = animate(0, animationTarget, _objectSpread(_objectSpread({}, options), {}, {\n          onUpdate: latest => {\n            var _a;\n            this.mixTargetDelta(latest);\n            (_a = options.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options, latest);\n          },\n          onComplete: () => {\n            var _a;\n            (_a = options.onComplete) === null || _a === void 0 ? void 0 : _a.call(options);\n            this.completeAnimation();\n          }\n        }));\n        if (this.resumingFrom) {\n          this.resumingFrom.currentAnimation = this.currentAnimation;\n        }\n        this.pendingAnimation = undefined;\n      });\n    }\n    completeAnimation() {\n      var _a;\n      if (this.resumingFrom) {\n        this.resumingFrom.currentAnimation = undefined;\n        this.resumingFrom.preserveOpacity = undefined;\n      }\n      (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.exitAnimationComplete();\n      this.resumingFrom = this.currentAnimation = this.animationValues = undefined;\n      this.notifyListeners(\"animationComplete\");\n    }\n    finishAnimation() {\n      var _a;\n      if (this.currentAnimation) {\n        (_a = this.mixTargetDelta) === null || _a === void 0 ? void 0 : _a.call(this, animationTarget);\n        this.currentAnimation.stop();\n      }\n      this.completeAnimation();\n    }\n    applyTransformsToTarget() {\n      const lead = this.getLead();\n      let {\n        targetWithTransforms,\n        target,\n        layout,\n        latestValues\n      } = lead;\n      if (!targetWithTransforms || !target || !layout) return;\n      /**\n       * If we're only animating position, and this element isn't the lead element,\n       * then instead of projecting into the lead box we instead want to calculate\n       * a new target that aligns the two boxes but maintains the layout shape.\n       */\n      if (this !== lead && this.layout && layout && shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n        target = this.target || createBox();\n        const xLength = calcLength(this.layout.layoutBox.x);\n        target.x.min = lead.target.x.min;\n        target.x.max = target.x.min + xLength;\n        const yLength = calcLength(this.layout.layoutBox.y);\n        target.y.min = lead.target.y.min;\n        target.y.max = target.y.min + yLength;\n      }\n      copyBoxInto(targetWithTransforms, target);\n      /**\n       * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n       * This is the final box that we will then project into by calculating a transform delta and\n       * applying it to the corrected box.\n       */\n      transformBox(targetWithTransforms, latestValues);\n      /**\n       * Update the delta between the corrected box and the final target box, after\n       * user-set transforms are applied to it. This will be used by the renderer to\n       * create a transform style that will reproject the element from its layout layout\n       * into the desired bounding box.\n       */\n      calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n    }\n    registerSharedNode(layoutId, node) {\n      var _a, _b, _c;\n      if (!this.sharedNodes.has(layoutId)) {\n        this.sharedNodes.set(layoutId, new NodeStack());\n      }\n      const stack = this.sharedNodes.get(layoutId);\n      stack.add(node);\n      node.promote({\n        transition: (_a = node.options.initialPromotionConfig) === null || _a === void 0 ? void 0 : _a.transition,\n        preserveFollowOpacity: (_c = (_b = node.options.initialPromotionConfig) === null || _b === void 0 ? void 0 : _b.shouldPreserveFollowOpacity) === null || _c === void 0 ? void 0 : _c.call(_b, node)\n      });\n    }\n    isLead() {\n      const stack = this.getStack();\n      return stack ? stack.lead === this : true;\n    }\n    getLead() {\n      var _a;\n      const {\n        layoutId\n      } = this.options;\n      return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n    }\n    getPrevLead() {\n      var _a;\n      const {\n        layoutId\n      } = this.options;\n      return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n    }\n    getStack() {\n      const {\n        layoutId\n      } = this.options;\n      if (layoutId) return this.root.sharedNodes.get(layoutId);\n    }\n    promote() {\n      let {\n        needsReset,\n        transition,\n        preserveFollowOpacity\n      } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      const stack = this.getStack();\n      if (stack) stack.promote(this, preserveFollowOpacity);\n      if (needsReset) {\n        this.projectionDelta = undefined;\n        this.needsReset = true;\n      }\n      if (transition) this.setOptions({\n        transition\n      });\n    }\n    relegate() {\n      const stack = this.getStack();\n      if (stack) {\n        return stack.relegate(this);\n      } else {\n        return false;\n      }\n    }\n    resetRotation() {\n      const {\n        visualElement\n      } = this.options;\n      if (!visualElement) return;\n      // If there's no detected rotation values, we can early return without a forced render.\n      let hasRotate = false;\n      // Keep a record of all the values we've reset\n      const resetValues = {};\n      // Check the rotate value of all axes and reset to 0\n      for (let i = 0; i < transformAxes.length; i++) {\n        const axis = transformAxes[i];\n        const key = \"rotate\" + axis;\n        // If this rotation doesn't exist as a motion value, then we don't\n        // need to reset it\n        if (!visualElement.getStaticValue(key)) {\n          continue;\n        }\n        hasRotate = true;\n        // Record the rotation and then temporarily set it to 0\n        resetValues[key] = visualElement.getStaticValue(key);\n        visualElement.setStaticValue(key, 0);\n      }\n      // If there's no rotation values, we don't need to do any more.\n      if (!hasRotate) return;\n      // Force a render of this element to apply the transform with all rotations\n      // set to 0.\n      visualElement === null || visualElement === void 0 ? void 0 : visualElement.render();\n      // Put back all the values we reset\n      for (const key in resetValues) {\n        visualElement.setStaticValue(key, resetValues[key]);\n      }\n      // Schedule a render for the next frame. This ensures we won't visually\n      // see the element with the reset rotate value applied.\n      visualElement.scheduleRender();\n    }\n    getProjectionStyles() {\n      let styleProp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var _a, _b, _c;\n      // TODO: Return lifecycle-persistent object\n      const styles = {};\n      if (!this.instance || this.isSVG) return styles;\n      if (!this.isVisible) {\n        return {\n          visibility: \"hidden\"\n        };\n      } else {\n        styles.visibility = \"\";\n      }\n      const transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n      if (this.needsReset) {\n        this.needsReset = false;\n        styles.opacity = \"\";\n        styles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || \"\";\n        styles.transform = transformTemplate ? transformTemplate(this.latestValues, \"\") : \"none\";\n        return styles;\n      }\n      const lead = this.getLead();\n      if (!this.projectionDelta || !this.layout || !lead.target) {\n        const emptyStyles = {};\n        if (this.options.layoutId) {\n          emptyStyles.opacity = this.latestValues.opacity !== undefined ? this.latestValues.opacity : 1;\n          emptyStyles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || \"\";\n        }\n        if (this.hasProjected && !hasTransform(this.latestValues)) {\n          emptyStyles.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n          this.hasProjected = false;\n        }\n        return emptyStyles;\n      }\n      const valuesToRender = lead.animationValues || lead.latestValues;\n      this.applyTransformsToTarget();\n      styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n      if (transformTemplate) {\n        styles.transform = transformTemplate(valuesToRender, styles.transform);\n      }\n      const {\n        x,\n        y\n      } = this.projectionDelta;\n      styles.transformOrigin = \"\".concat(x.origin * 100, \"% \").concat(y.origin * 100, \"% 0\");\n      if (lead.animationValues) {\n        /**\n         * If the lead component is animating, assign this either the entering/leaving\n         * opacity\n         */\n        styles.opacity = lead === this ? (_c = (_b = valuesToRender.opacity) !== null && _b !== void 0 ? _b : this.latestValues.opacity) !== null && _c !== void 0 ? _c : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;\n      } else {\n        /**\n         * Or we're not animating at all, set the lead component to its layout\n         * opacity and other components to hidden.\n         */\n        styles.opacity = lead === this ? valuesToRender.opacity !== undefined ? valuesToRender.opacity : \"\" : valuesToRender.opacityExit !== undefined ? valuesToRender.opacityExit : 0;\n      }\n      /**\n       * Apply scale correction\n       */\n      for (const key in scaleCorrectors) {\n        if (valuesToRender[key] === undefined) continue;\n        const {\n          correct,\n          applyTo\n        } = scaleCorrectors[key];\n        const corrected = correct(valuesToRender[key], lead);\n        if (applyTo) {\n          const num = applyTo.length;\n          for (let i = 0; i < num; i++) {\n            styles[applyTo[i]] = corrected;\n          }\n        } else {\n          styles[key] = corrected;\n        }\n      }\n      /**\n       * Disable pointer events on follow components. This is to ensure\n       * that if a follow component covers a lead component it doesn't block\n       * pointer events on the lead.\n       */\n      if (this.options.layoutId) {\n        styles.pointerEvents = lead === this ? resolveMotionValue(styleProp.pointerEvents) || \"\" : \"none\";\n      }\n      return styles;\n    }\n    clearSnapshot() {\n      this.resumeFrom = this.snapshot = undefined;\n    }\n    // Only run on root\n    resetTree() {\n      this.root.nodes.forEach(node => {\n        var _a;\n        return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n      });\n      this.root.nodes.forEach(clearMeasurements);\n      this.root.sharedNodes.clear();\n    }\n  };\n}\nfunction updateLayout(node) {\n  node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n  var _a, _b, _c;\n  const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n  if (node.isLead() && node.layout && snapshot && node.hasListeners(\"didUpdate\")) {\n    const {\n      layoutBox: layout,\n      measuredBox: measuredLayout\n    } = node.layout;\n    const {\n      animationType\n    } = node.options;\n    // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n    // animations for instance if layout=\"size\" and an element has only changed position\n    if (animationType === \"size\") {\n      eachAxis(axis => {\n        const axisSnapshot = snapshot.isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];\n        const length = calcLength(axisSnapshot);\n        axisSnapshot.min = layout[axis].min;\n        axisSnapshot.max = axisSnapshot.min + length;\n      });\n    } else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n      eachAxis(axis => {\n        const axisSnapshot = snapshot.isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];\n        const length = calcLength(layout[axis]);\n        axisSnapshot.max = axisSnapshot.min + length;\n      });\n    }\n    const layoutDelta = createDelta();\n    calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n    const visualDelta = createDelta();\n    if (snapshot.isShared) {\n      calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n    } else {\n      calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n    }\n    const hasLayoutChanged = !isDeltaZero(layoutDelta);\n    let hasRelativeTargetChanged = false;\n    if (!node.resumeFrom) {\n      const relativeParent = node.getClosestProjectingParent();\n      /**\n       * If the relativeParent is itself resuming from a different element then\n       * the relative snapshot is not relavent\n       */\n      if (relativeParent && !relativeParent.resumeFrom) {\n        const {\n          snapshot: parentSnapshot,\n          layout: parentLayout\n        } = relativeParent;\n        if (parentSnapshot && parentLayout) {\n          const relativeSnapshot = createBox();\n          calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n          const relativeLayout = createBox();\n          calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n          if (!boxEquals(relativeSnapshot, relativeLayout)) {\n            hasRelativeTargetChanged = true;\n          }\n        }\n      }\n    }\n    node.notifyListeners(\"didUpdate\", {\n      layout,\n      snapshot,\n      delta: visualDelta,\n      layoutDelta,\n      hasLayoutChanged,\n      hasRelativeTargetChanged\n    });\n  } else if (node.isLead()) {\n    (_c = (_b = node.options).onExitComplete) === null || _c === void 0 ? void 0 : _c.call(_b);\n  }\n  /**\n   * Clearing transition\n   * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n   * and why we need it at all\n   */\n  node.options.transition = undefined;\n}\nfunction clearSnapshot(node) {\n  node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n  node.clearMeasurements();\n}\nfunction resetTransformStyle(node) {\n  const {\n    visualElement\n  } = node.options;\n  if (visualElement === null || visualElement === void 0 ? void 0 : visualElement.getProps().onBeforeLayoutMeasure) {\n    visualElement.notify(\"BeforeLayoutMeasure\");\n  }\n  node.resetTransform();\n}\nfunction finishAnimation(node) {\n  node.finishAnimation();\n  node.targetDelta = node.relativeTarget = node.target = undefined;\n}\nfunction resolveTargetDelta(node) {\n  node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n  node.calcProjection();\n}\nfunction resetRotation(node) {\n  node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n  stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n  output.translate = mix(delta.translate, 0, p);\n  output.scale = mix(delta.scale, 1, p);\n  output.origin = delta.origin;\n  output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n  output.min = mix(from.min, to.min, p);\n  output.max = mix(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n  mixAxis(output.x, from.x, to.x, p);\n  mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n  return node.animationValues && node.animationValues.opacityExit !== undefined;\n}\nconst defaultLayoutTransition = {\n  duration: 0.45,\n  ease: [0.4, 0, 0.1, 1]\n};\nfunction mountNodeEarly(node, id) {\n  /**\n   * Rather than searching the DOM from document we can search the\n   * path for the deepest mounted ancestor and search from there\n   */\n  let searchNode = node.root;\n  for (let i = node.path.length - 1; i >= 0; i--) {\n    if (Boolean(node.path[i].instance)) {\n      searchNode = node.path[i];\n      break;\n    }\n  }\n  const searchElement = searchNode && searchNode !== node.root ? searchNode.instance : document;\n  const element = searchElement.querySelector(\"[data-projection-id=\\\"\".concat(id, \"\\\"]\"));\n  if (element) node.mount(element, true);\n}\nfunction roundAxis(axis) {\n  axis.min = Math.round(axis.min);\n  axis.max = Math.round(axis.max);\n}\nfunction roundBox(box) {\n  roundAxis(box.x);\n  roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n  return animationType === \"position\" || animationType === \"preserve-aspect\" && !isCloseTo(aspectRatio(snapshot), aspectRatio(layout), 0.2);\n}\nexport { createProjectionNode, mixAxis, mixAxisDelta, mixBox };","map":{"version":3,"names":["sync","cancelSync","flushSync","mix","animate","SubscriptionManager","mixValues","copyBoxInto","translateAxis","transformBox","applyBoxDelta","applyTreeDeltas","calcRelativePosition","calcRelativeBox","calcBoxDelta","calcLength","removeBoxTransforms","createBox","createDelta","getValueTransition","boxEquals","isDeltaZero","isCloseTo","aspectRatio","NodeStack","scaleCorrectors","buildProjectionTransform","eachAxis","hasTransform","hasScale","has2DTranslate","FlatTree","resolveMotionValue","globalProjectionState","delay","transformAxes","animationTarget","createProjectionNode","_ref","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","ProjectionNode","constructor","elementId","latestValues","arguments","length","undefined","parent","children","Set","options","isTreeAnimating","isAnimationBlocked","isLayoutDirty","updateManuallyBlocked","updateBlockedByResize","isUpdating","isSVG","needsReset","shouldResetTransform","treeScale","x","y","eventHandlers","Map","potentialNodes","checkUpdateFailed","clearAllSnapshots","updateProjection","nodes","forEach","resolveTargetDelta","calcProjection","hasProjected","isVisible","animationProgress","sharedNodes","root","path","depth","registerPotentialNode","i","addEventListener","name","handler","has","set","get","add","notifyListeners","subscriptionManager","_len","args","Array","_key","notify","hasListeners","id","node","mount","instance","_a","SVGElement","tagName","layoutId","layout","visualElement","current","delete","cancelDelay","resizeUnblockUpdate","hasAnimatedSinceResize","finishAnimation","registerSharedNode","_ref2","delta","hasLayoutChanged","hasRelativeTargetChanged","newLayout","_b","_c","_d","_e","isTreeAnimationBlocked","target","relativeTarget","layoutTransition","transition","getDefaultTransition","defaultLayoutTransition","onLayoutAnimationStart","onLayoutAnimationComplete","getProps","targetChanged","targetLayout","hasOnlyRelativeTargetChanged","resumeFrom","currentAnimation","resumingFrom","setAnimationOrigin","animationOptions","_objectSpread","onPlay","onComplete","shouldReduceMotion","type","startAnimation","isLead","onExitComplete","call","unmount","willUpdate","remove","getStack","preRender","blockUpdate","unblockUpdate","isUpdateBlocked","startUpdate","resetRotation","shouldNotifyListeners","updateScroll","transformTemplate","prevTransformTemplateValue","updateSnapshot","didUpdate","updateWasBlocked","clearMeasurements","size","mountNodeEarly","clear","resetTransformStyle","updateLayout","notifyLayoutUpdate","update","render","clearSnapshot","removeLeadSnapshots","scheduleUpdateProjection","scheduleCheckAfterUnmount","postRender","snapshot","measure","alwaysMeasureLayout","prevLayout","layoutCorrected","projectionDelta","layoutBox","layoutScroll","isScrollRoot","scroll","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","scheduleRender","removeTransform","pageBox","measurePageBox","removeElementScroll","roundBox","measuredBox","box","measureViewportBox","boxWithoutScroll","rootScroll","applyTransform","transformOnly","withTransforms","boxWithoutTransform","sourceBox","nodeBox","setTargetDelta","targetDelta","setOptions","crossfade","relativeParent","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","Boolean","attemptToResolveRelativeTarget","pendingAnimation","lead","getLead","projectionDeltaWithTransform","prevTreeScaleX","prevTreeScaleY","prevProjectionTransform","projectionTransform","hide","show","notifyAll","snapshotLatestValues","mixedValues","relativeLayout","isSharedLayoutAnimation","isShared","isOnlyMember","members","shouldCrossfadeOpacity","some","hasOpacityCrossfade","mixTargetDelta","latest","progress","mixAxisDelta","mixBox","animationValues","stop","onUpdate","completeAnimation","preserveOpacity","exitAnimationComplete","applyTransformsToTarget","shouldAnimatePositionOnly","animationType","xLength","min","max","yLength","stack","promote","initialPromotionConfig","preserveFollowOpacity","shouldPreserveFollowOpacity","getPrevLead","prevLead","relegate","hasRotate","resetValues","axis","key","getStaticValue","setStaticValue","getProjectionStyles","styleProp","styles","visibility","opacity","pointerEvents","transform","emptyStyles","valuesToRender","transformOrigin","concat","origin","opacityExit","correct","applyTo","corrected","num","resetTree","measuredLayout","axisSnapshot","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","removeLeadSnapshot","output","p","translate","scale","originPoint","mixAxis","from","to","duration","ease","searchNode","searchElement","document","element","querySelector","roundAxis","Math","round"],"sources":["C:/Coding/Meta_Advanced_Basics/node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs"],"sourcesContent":["import sync, { cancelSync, flushSync } from 'framesync';\nimport { mix } from 'popmotion';\nimport { animate } from '../../animation/animate.mjs';\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEquals, isDeltaZero, isCloseTo, aspectRatio } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nimport { delay } from '../../utils/delay.mjs';\n\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(elementId, latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            // Note: Currently only running on root node\n            this.potentialNodes = new Map();\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            this.updateProjection = () => {\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n            };\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.elementId = elementId;\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            elementId && this.root.registerPotentialNode(elementId, this);\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager === null || subscriptionManager === void 0 ? void 0 : subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        registerPotentialNode(id, node) {\n            this.potentialNodes.set(id, node);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance, isLayoutDirty = false) {\n            var _a;\n            if (this.instance)\n                return;\n            this.isSVG =\n                instance instanceof SVGElement && instance.tagName !== \"svg\";\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            (_a = this.parent) === null || _a === void 0 ? void 0 : _a.children.add(this);\n            this.elementId && this.root.potentialNodes.delete(this.elementId);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                attachResizeListener(instance, () => {\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout, }) => {\n                    var _a, _b, _c, _d, _e;\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = (_b = (_a = this.options.transition) !== null && _a !== void 0 ? _a : visualElement.getDefaultTransition()) !== null && _b !== void 0 ? _b : defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const targetChanged = !this.targetLayout ||\n                        !boxEquals(this.targetLayout, newLayout) ||\n                        hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (((_c = this.resumeFrom) === null || _c === void 0 ? void 0 : _c.instance) ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (targetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged &&\n                            this.animationProgress === 0) {\n                            finishAnimation(this);\n                        }\n                        this.isLead() && ((_e = (_d = this.options).onExitComplete) === null || _e === void 0 ? void 0 : _e.call(_d));\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            var _a, _b;\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.remove(this);\n            (_b = this.parent) === null || _b === void 0 ? void 0 : _b.children.delete(this);\n            this.instance = undefined;\n            cancelSync.preRender(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            var _a;\n            return (this.isAnimationBlocked ||\n                ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            var _a;\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            (_a = this.nodes) === null || _a === void 0 ? void 0 : _a.forEach(resetRotation);\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            var _a, _b, _c;\n            if (this.root.isUpdateBlocked()) {\n                (_b = (_a = this.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);\n                return;\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                /**\n                 * TODO: Check we haven't updated the scroll\n                 * since the last didUpdate\n                 */\n                node.updateScroll();\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            const transformTemplate = (_c = this.options.visualElement) === null || _c === void 0 ? void 0 : _c.getProps().transformTemplate;\n            this.prevTransformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        // Note: Currently only running on root node\n        didUpdate() {\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating)\n                return;\n            this.isUpdating = false;\n            /**\n             * Search for and mount newly-added projection elements.\n             *\n             * TODO: Every time a new component is rendered we could search up the tree for\n             * the closest mounted node and query from there rather than document.\n             */\n            if (this.potentialNodes.size) {\n                this.potentialNodes.forEach(mountNodeEarly);\n                this.potentialNodes.clear();\n            }\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            // Flush any scheduled updates\n            flushSync.update();\n            flushSync.preRender();\n            flushSync.render();\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            sync.preRender(this.updateProjection, false, true);\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            sync.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            this.snapshot = this.measure();\n        }\n        updateLayout() {\n            var _a;\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout === null || prevLayout === void 0 ? void 0 : prevLayout.layoutBox);\n        }\n        updateScroll() {\n            if (this.options.layoutScroll && this.instance) {\n                this.isScrollRoot = checkIsScrollRoot(this.instance);\n                this.scroll = measureScroll(this.instance);\n            }\n        }\n        resetTransform() {\n            var _a;\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n            const transformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */\n            if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n            };\n        }\n        measurePageBox() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            // Remove viewport scroll to give page-relative coordinates\n            const { scroll } = this.root;\n            if (scroll) {\n                translateAxis(box.x, scroll.x);\n                translateAxis(box.y, scroll.y);\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options, isScrollRoot } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (isScrollRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                        const { scroll: rootScroll } = this.root;\n                        /**\n                         * Undo the application of page scroll that was originally added\n                         * to the measured bounding box.\n                         */\n                        if (rootScroll) {\n                            translateAxis(boxWithoutScroll.x, -rootScroll.x);\n                            translateAxis(boxWithoutScroll.y, -rootScroll.y);\n                        }\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.x);\n                    translateAxis(boxWithoutScroll.y, scroll.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.x,\n                        y: -node.scroll.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            var _a;\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, (_a = node.snapshot) === null || _a === void 0 ? void 0 : _a.layoutBox, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        /**\n         *\n         */\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        /**\n         * Frame calculations\n         */\n        resolveTargetDelta() {\n            var _a;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            // TODO If this is unsuccessful this currently happens every frame\n            if (!this.targetDelta && !this.relativeTarget) {\n                // TODO: This is a semi-repetition of further down this function, make DRY\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent && relativeParent.layout) {\n                    this.relativeParent = relativeParent;\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.target)) {\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    Boolean(relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !relativeParent.options.layoutScroll &&\n                    relativeParent.target) {\n                    this.relativeParent = relativeParent;\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n        }\n        getClosestProjectingParent() {\n            if (!this.parent ||\n                hasScale(this.parent.latestValues) ||\n                has2DTranslate(this.parent.latestValues))\n                return undefined;\n            if ((this.parent.relativeTarget || this.parent.targetDelta) &&\n                this.parent.layout) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        calcProjection() {\n            var _a;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean(((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            const lead = this.getLead();\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, Boolean(this.resumingFrom) || this !== lead);\n            const { target } = lead;\n            if (!target)\n                return;\n            if (!this.projectionDelta) {\n                this.projectionDelta = createDelta();\n                this.projectionDeltaWithTransform = createDelta();\n            }\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            const prevProjectionTransform = this.projectionTransform;\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n            if (this.projectionTransform !== prevProjectionTransform ||\n                this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            var _a, _b, _c;\n            (_b = (_a = this.options).scheduleRender) === null || _b === void 0 ? void 0 : _b.call(_a);\n            notifyAll && ((_c = this.getStack()) === null || _c === void 0 ? void 0 : _c.scheduleRender());\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            var _a;\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.latestValues) || {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            this.relativeTarget = this.relativeTargetOrigin = undefined;\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const isSharedLayoutAnimation = snapshot === null || snapshot === void 0 ? void 0 : snapshot.isShared;\n            const isOnlyMember = (((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.members.length) || 0) <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            this.mixTargetDelta = (latest) => {\n                var _a;\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.layout)) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(0);\n        }\n        startAnimation(options) {\n            var _a, _b;\n            this.notifyListeners(\"animationStart\");\n            (_a = this.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n            if (this.resumingFrom) {\n                (_b = this.resumingFrom.currentAnimation) === null || _b === void 0 ? void 0 : _b.stop();\n            }\n            if (this.pendingAnimation) {\n                cancelSync.update(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = sync.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                this.currentAnimation = animate(0, animationTarget, {\n                    ...options,\n                    onUpdate: (latest) => {\n                        var _a;\n                        this.mixTargetDelta(latest);\n                        (_a = options.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options, latest);\n                    },\n                    onComplete: () => {\n                        var _a;\n                        (_a = options.onComplete) === null || _a === void 0 ? void 0 : _a.call(options);\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            var _a;\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            var _a;\n            if (this.currentAnimation) {\n                (_a = this.mixTargetDelta) === null || _a === void 0 ? void 0 : _a.call(this, animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */\n            if (this !== lead &&\n                this.layout &&\n                layout &&\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            var _a, _b, _c;\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            node.promote({\n                transition: (_a = node.options.initialPromotionConfig) === null || _a === void 0 ? void 0 : _a.transition,\n                preserveFollowOpacity: (_c = (_b = node.options.initialPromotionConfig) === null || _b === void 0 ? void 0 : _b.shouldPreserveFollowOpacity) === null || _c === void 0 ? void 0 : _c.call(_b, node),\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        }\n        getPrevLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected rotation values, we can early return without a forced render.\n            let hasRotate = false;\n            // Keep a record of all the values we've reset\n            const resetValues = {};\n            // Check the rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                const axis = transformAxes[i];\n                const key = \"rotate\" + axis;\n                // If this rotation doesn't exist as a motion value, then we don't\n                // need to reset it\n                if (!visualElement.getStaticValue(key)) {\n                    continue;\n                }\n                hasRotate = true;\n                // Record the rotation and then temporarily set it to 0\n                resetValues[key] = visualElement.getStaticValue(key);\n                visualElement.setStaticValue(key, 0);\n            }\n            // If there's no rotation values, we don't need to do any more.\n            if (!hasRotate)\n                return;\n            // Force a render of this element to apply the transform with all rotations\n            // set to 0.\n            visualElement === null || visualElement === void 0 ? void 0 : visualElement.render();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp = {}) {\n            var _a, _b, _c;\n            // TODO: Return lifecycle-persistent object\n            const styles = {};\n            if (!this.instance || this.isSVG)\n                return styles;\n            if (!this.isVisible) {\n                return { visibility: \"hidden\" };\n            }\n            else {\n                styles.visibility = \"\";\n            }\n            const transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_c = (_b = valuesToRender.opacity) !== null && _b !== void 0 ? _b : this.latestValues.opacity) !== null && _c !== void 0 ? _c : 1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo } = scaleCorrectors[key];\n                const corrected = correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a, _b, _c;\n    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = snapshot.isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis) => {\n                const axisSnapshot = snapshot.isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = createDelta();\n        if (snapshot.isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEquals(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n        });\n    }\n    else if (node.isLead()) {\n        (_c = (_b = node.options).onExitComplete) === null || _c === void 0 ? void 0 : _c.call(_b);\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement === null || visualElement === void 0 ? void 0 : visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetRotation(node) {\n    node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mix(delta.translate, 0, p);\n    output.scale = mix(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mix(from.min, to.min, p);\n    output.max = mix(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nfunction mountNodeEarly(node, id) {\n    /**\n     * Rather than searching the DOM from document we can search the\n     * path for the deepest mounted ancestor and search from there\n     */\n    let searchNode = node.root;\n    for (let i = node.path.length - 1; i >= 0; i--) {\n        if (Boolean(node.path[i].instance)) {\n            searchNode = node.path[i];\n            break;\n        }\n    }\n    const searchElement = searchNode && searchNode !== node.root ? searchNode.instance : document;\n    const element = searchElement.querySelector(`[data-projection-id=\"${id}\"]`);\n    if (element)\n        node.mount(element, true);\n}\nfunction roundAxis(axis) {\n    axis.min = Math.round(axis.min);\n    axis.max = Math.round(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return (animationType === \"position\" ||\n        (animationType === \"preserve-aspect\" &&\n            !isCloseTo(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\n}\n\nexport { createProjectionNode, mixAxis, mixAxisDelta, mixBox };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}