{"ast":null,"code":"// src/use-counter.ts\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { clampValue, countDecimalPlaces, toPrecision } from \"@chakra-ui/number-utils\";\nimport { useCallback, useState } from \"react\";\nfunction useCounter() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    onChange,\n    precision: precisionProp,\n    defaultValue,\n    value: valueProp,\n    step: stepProp = 1,\n    min = Number.MIN_SAFE_INTEGER,\n    max = Number.MAX_SAFE_INTEGER,\n    keepWithinRange = true\n  } = props;\n  const onChangeProp = useCallbackRef(onChange);\n  const [valueState, setValue] = useState(() => {\n    var _cast;\n    if (defaultValue == null) return \"\";\n    return (_cast = cast(defaultValue, stepProp, precisionProp)) !== null && _cast !== void 0 ? _cast : \"\";\n  });\n  const isControlled = typeof valueProp !== \"undefined\";\n  const value = isControlled ? valueProp : valueState;\n  const decimalPlaces = getDecimalPlaces(parse(value), stepProp);\n  const precision = precisionProp !== null && precisionProp !== void 0 ? precisionProp : decimalPlaces;\n  const update = useCallback(next => {\n    if (next === value) return;\n    if (!isControlled) {\n      setValue(next.toString());\n    }\n    onChangeProp == null ? void 0 : onChangeProp(next.toString(), parse(next));\n  }, [onChangeProp, isControlled, value]);\n  const clamp = useCallback(value2 => {\n    let nextValue = value2;\n    if (keepWithinRange) {\n      nextValue = clampValue(nextValue, min, max);\n    }\n    return toPrecision(nextValue, precision);\n  }, [precision, keepWithinRange, max, min]);\n  const increment = useCallback(function () {\n    let step = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : stepProp;\n    let next;\n    if (value === \"\") {\n      next = parse(step);\n    } else {\n      next = parse(value) + step;\n    }\n    next = clamp(next);\n    update(next);\n  }, [clamp, stepProp, update, value]);\n  const decrement = useCallback(function () {\n    let step = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : stepProp;\n    let next;\n    if (value === \"\") {\n      next = parse(-step);\n    } else {\n      next = parse(value) - step;\n    }\n    next = clamp(next);\n    update(next);\n  }, [clamp, stepProp, update, value]);\n  const reset = useCallback(() => {\n    let next;\n    if (defaultValue == null) {\n      next = \"\";\n    } else {\n      var _cast2;\n      next = (_cast2 = cast(defaultValue, stepProp, precisionProp)) !== null && _cast2 !== void 0 ? _cast2 : min;\n    }\n    update(next);\n  }, [defaultValue, precisionProp, stepProp, update, min]);\n  const castValue = useCallback(value2 => {\n    var _cast3;\n    const nextValue = (_cast3 = cast(value2, stepProp, precision)) !== null && _cast3 !== void 0 ? _cast3 : min;\n    update(nextValue);\n  }, [precision, stepProp, update, min]);\n  const valueAsNumber = parse(value);\n  const isOutOfRange = valueAsNumber > max || valueAsNumber < min;\n  const isAtMax = valueAsNumber === max;\n  const isAtMin = valueAsNumber === min;\n  return {\n    isOutOfRange,\n    isAtMax,\n    isAtMin,\n    precision,\n    value,\n    valueAsNumber,\n    update,\n    reset,\n    increment,\n    decrement,\n    clamp,\n    cast: castValue,\n    setValue\n  };\n}\nfunction parse(value) {\n  return parseFloat(value.toString().replace(/[^\\w.-]+/g, \"\"));\n}\nfunction getDecimalPlaces(value, step) {\n  return Math.max(countDecimalPlaces(step), countDecimalPlaces(value));\n}\nfunction cast(value, step, precision) {\n  const parsedValue = parse(value);\n  if (Number.isNaN(parsedValue)) return void 0;\n  const decimalPlaces = getDecimalPlaces(parsedValue, step);\n  return toPrecision(parsedValue, precision !== null && precision !== void 0 ? precision : decimalPlaces);\n}\nexport { useCounter };","map":{"version":3,"names":["useCallbackRef","clampValue","countDecimalPlaces","toPrecision","useCallback","useState","useCounter","props","arguments","length","undefined","onChange","precision","precisionProp","defaultValue","value","valueProp","step","stepProp","min","Number","MIN_SAFE_INTEGER","max","MAX_SAFE_INTEGER","keepWithinRange","onChangeProp","valueState","setValue","_cast","cast","isControlled","decimalPlaces","getDecimalPlaces","parse","update","next","toString","clamp","value2","nextValue","increment","decrement","reset","_cast2","castValue","_cast3","valueAsNumber","isOutOfRange","isAtMax","isAtMin","parseFloat","replace","Math","parsedValue","isNaN"],"sources":["C:/Coding/Meta_Advanced_Basics/node_modules/@chakra-ui/counter/dist/index.esm.js"],"sourcesContent":["// src/use-counter.ts\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport {\n  clampValue,\n  countDecimalPlaces,\n  toPrecision\n} from \"@chakra-ui/number-utils\";\nimport { useCallback, useState } from \"react\";\nfunction useCounter(props = {}) {\n  const {\n    onChange,\n    precision: precisionProp,\n    defaultValue,\n    value: valueProp,\n    step: stepProp = 1,\n    min = Number.MIN_SAFE_INTEGER,\n    max = Number.MAX_SAFE_INTEGER,\n    keepWithinRange = true\n  } = props;\n  const onChangeProp = useCallbackRef(onChange);\n  const [valueState, setValue] = useState(() => {\n    if (defaultValue == null)\n      return \"\";\n    return cast(defaultValue, stepProp, precisionProp) ?? \"\";\n  });\n  const isControlled = typeof valueProp !== \"undefined\";\n  const value = isControlled ? valueProp : valueState;\n  const decimalPlaces = getDecimalPlaces(parse(value), stepProp);\n  const precision = precisionProp ?? decimalPlaces;\n  const update = useCallback((next) => {\n    if (next === value)\n      return;\n    if (!isControlled) {\n      setValue(next.toString());\n    }\n    onChangeProp == null ? void 0 : onChangeProp(next.toString(), parse(next));\n  }, [onChangeProp, isControlled, value]);\n  const clamp = useCallback((value2) => {\n    let nextValue = value2;\n    if (keepWithinRange) {\n      nextValue = clampValue(nextValue, min, max);\n    }\n    return toPrecision(nextValue, precision);\n  }, [precision, keepWithinRange, max, min]);\n  const increment = useCallback((step = stepProp) => {\n    let next;\n    if (value === \"\") {\n      next = parse(step);\n    } else {\n      next = parse(value) + step;\n    }\n    next = clamp(next);\n    update(next);\n  }, [clamp, stepProp, update, value]);\n  const decrement = useCallback((step = stepProp) => {\n    let next;\n    if (value === \"\") {\n      next = parse(-step);\n    } else {\n      next = parse(value) - step;\n    }\n    next = clamp(next);\n    update(next);\n  }, [clamp, stepProp, update, value]);\n  const reset = useCallback(() => {\n    let next;\n    if (defaultValue == null) {\n      next = \"\";\n    } else {\n      next = cast(defaultValue, stepProp, precisionProp) ?? min;\n    }\n    update(next);\n  }, [defaultValue, precisionProp, stepProp, update, min]);\n  const castValue = useCallback((value2) => {\n    const nextValue = cast(value2, stepProp, precision) ?? min;\n    update(nextValue);\n  }, [precision, stepProp, update, min]);\n  const valueAsNumber = parse(value);\n  const isOutOfRange = valueAsNumber > max || valueAsNumber < min;\n  const isAtMax = valueAsNumber === max;\n  const isAtMin = valueAsNumber === min;\n  return {\n    isOutOfRange,\n    isAtMax,\n    isAtMin,\n    precision,\n    value,\n    valueAsNumber,\n    update,\n    reset,\n    increment,\n    decrement,\n    clamp,\n    cast: castValue,\n    setValue\n  };\n}\nfunction parse(value) {\n  return parseFloat(value.toString().replace(/[^\\w.-]+/g, \"\"));\n}\nfunction getDecimalPlaces(value, step) {\n  return Math.max(countDecimalPlaces(step), countDecimalPlaces(value));\n}\nfunction cast(value, step, precision) {\n  const parsedValue = parse(value);\n  if (Number.isNaN(parsedValue))\n    return void 0;\n  const decimalPlaces = getDecimalPlaces(parsedValue, step);\n  return toPrecision(parsedValue, precision ?? decimalPlaces);\n}\nexport {\n  useCounter\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}